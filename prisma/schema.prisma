generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Cart {
  id        String   @id @default(uuid())
  email     String?
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id        String   @id @default(uuid())
  quantity  Int
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(uuid())
  lines       String
  totalAmount Int
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String
  description String
  imageId     String?   @unique
  image       Image?    @relation(fields: [imageId], references: [id])
  products    Product[] @relation("ProductToCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Collection {
  id          String    @id @default(uuid())
  name        String
  slug        String
  description String
  imageId     String?   @unique
  image       Image?    @relation(fields: [imageId], references: [id])
  products    Product[] @relation("ProductToCollection")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Color {
  id       String    @id @default(uuid())
  name     String
  products Product[] @relation("ProductToColor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id       String    @id @default(uuid())
  name     String
  products Product[] @relation("ProductToSize")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id         String      @id @default(uuid())
  url        String
  alt        String?
  productId  String?
  product    Product?    @relation(fields: [productId], references: [id])
  category   Category?   @relation
  collection Collection? @relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String  @id @default(uuid())
  author      String
  email       String
  title       String
  description String
  rating      Float
  productId   String
  product     Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String       @id @default(uuid())
  name        String
  slug        String
  description String
  price       Int
  popularity  Int          @default(0)
  rating      Float?
  colors      Color[]      @relation("ProductToColor")
  sizes       Size[]       @relation("ProductToSize")
  categories  Category[]   @relation("ProductToCategory")
  collections Collection[] @relation("ProductToCollection")
  items       Item[]
  images      Image[]
  reviews     Review[]
  vectors     String       @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
